node() {
    def app

    stage('Checkout') { 
        deleteDir()
        checkout scm 
    }

    gitlabBuilds(builds: ["Build Docker Image", "Push docker image", "Run docker", "Sonarqube scan", "Dependeny Check", "Trivy Scan"]) {

        stage("Sonarqube scan") {
		    gitlabCommitStatus("Sonarqube scan") {
			    withSonarQubeEnv('Sonarqube Server') {
			        sh "${tool ('SonarQube Scanner')}/bin/sonar-scanner \
						-Dsonar.projectKey=juiceshop-pipeline \
						-Dsonar.sources=. \
						-Dsonar.host.url=http://sonarqube:9000 \
						-Dsonar.login=admin \
						-Dsonar.password=admin"
			    }
		    }
        }
	
	    stage("Build Docker Image") {
	        gitlabCommitStatus("Build Docker Image") {
                app = docker.build("devsecops/juiceshop")
            }
        }
    
        stage("Dependency Check") {
		    gitlabCommitStatus("Dependeny Check") {
			    app.inside {
				    dependencyCheck additionalArguments: '--format JSON --format XML', odcInstallation: 'Dependency-Check'
				    dependencyCheckPublisher pattern: ''
			    }
		    }
        }

        stage("Trivy Scan") {
	        gitlabCommitStatus("Trivy Scan") {
	            sh 'docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v /home/devsecops/docker/trivy:/root/.cache/ aquasec/trivy -f json -o /root/.cache/trivy/results/trivy_results.json devsecops/juiceshop'
	            sh 'echo "Trivy Scan completed"'
            }
        }

	    stage("Push docker image") {
		    gitlabCommitStatus("Publish docker image") {
			    docker.withRegistry('http://registry:5000', 'registry-auth') {
				    app.push("${env.BUILD_NUMBER}")
				    app.push("latest")
			    }
			    sh 'echo "Docker push completed"'
		    }
	    }

	    stage("Run docker") {
	        gitlabCommitStatus("Run docker") {
        	    sh 'docker run --rm -d -p 3000:3000 devsecops/juiceshop'
        	    sh 'echo "Docker push completed"'
            }
	    }
    }
}
